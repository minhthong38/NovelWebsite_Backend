const AuthorTask = require("../../../models/authors/authorTaskModel");
const Task = require("../../../models/authors/taskModel");
const AuthorExp = require("../../../models/authors/authorExpModel");
const { addExpForAuthor } = require("./expUtils");


//T·∫°o Author Task (Task hi·ªán t·∫°i c·ªßa Author)
const createAuthorTask = async (authorExpID) => {
    try {
      const firstTask = await Task.findOne().sort({ order: 1 }); // L·∫•y task ƒë·∫ßu ti√™n
  
      if (!firstTask) {
        throw new Error("Kh√¥ng c√≥ task n√†o ƒë·ªÉ g√°n!");
      }
  
      await AuthorTask.create({
        idAuthorExp: authorExpID,
        idTask: firstTask._id, // L∆∞u task ƒë·∫ßu ti√™n
        expEarned: firstTask.expPoint, // L·∫•y exp t·ª´ task ƒë√≥
      });
  
      console.log(`AuthorTask ƒë∆∞·ª£c t·∫°o v·ªõi Task: ${firstTask.taskName}, Exp: ${firstTask.expPoint}`);
    } catch (error) {
      console.log("L·ªói khi t·∫°o AuthorTask:", error.message);
    }
  };

const getAuthorTaskById = async (id) => {
    try {
        const authorTask = await AuthorTask.findById(id);
        if (!authorTask) {
            throw new Error("Kh√¥ng t√¨m th·∫•y nhi·ªám v·ª• t√°c gi·∫£.");
        }
        return authorTask;
    } catch (error) {
        throw new Error(error.message);
    }
};

//Ho√†n th√†nh nhi·ªám v·ª•
const completeAuthorTask = async (id) => {
    try {
      // 1Ô∏è‚É£ L·∫•y nhi·ªám v·ª• hi·ªán t·∫°i
      const authorTask = await AuthorTask.findById(id);
      if (!authorTask) {
        throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y nhi·ªám v·ª•!");
      }
  
      // 2Ô∏è‚É£ ƒê√°nh d·∫•u l√† "completed"
      authorTask.status = "completed";
  
      console.log(`‚úÖ Nhi·ªám v·ª• ${authorTask.idTask} ƒë√£ ho√†n th√†nh!`);
  
      // 3Ô∏è‚É£ C·∫≠p nh·∫≠t exp cho AuthorExp
      const authorExp = await AuthorExp.findById(authorTask.idAuthorExp);
      if (!authorExp) {
        throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y AuthorExp!");
      }
      await addExpForAuthor(authorExp.idUser, authorTask.expEarned);
  
      authorExp.totalExp += authorTask.expEarned;
  
      await authorExp.save();
      console.log(`üìà C·ªông ${authorTask.expEarned} Exp! T·ªïng Exp: ${authorExp.totalExp}`);
  
      // 4Ô∏è‚É£ L·∫•y task ti·∫øp theo d·ª±a tr√™n order
      const currentTask = await Task.findById(authorTask.idTask);
      let nextTask = await Task.findOne({ order: currentTask.order + 1 });

      // üîÑ N·∫øu kh√¥ng c√≤n nhi·ªám v·ª• -> quay l·∫°i nhi·ªám v·ª• ƒë·∫ßu ti√™n
      if (!nextTask) {
        nextTask = await Task.findOne().sort({ order: 1 });
        console.log("üîÑ Kh√¥ng c√≤n nhi·ªám v·ª• -> Quay l·∫°i nhi·ªám v·ª• ƒë·∫ßu ti√™n!");
      }

      // ‚úÖ C·∫≠p nh·∫≠t nhi·ªám v·ª• hi·ªán t·∫°i thay v√¨ t·∫°o m·ªõi
      authorTask.idTask = nextTask._id;
      authorTask.expEarned = nextTask.expPoint;
      authorTask.status = "pending";

      await authorTask.save();

      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t nhi·ªám v·ª•: ${nextTask.taskName}`);
  
      return { success: true, message: "Nhi·ªám v·ª• ho√†n th√†nh v√† c·∫≠p nh·∫≠t exp!" };
    } catch (error) {
      console.log("üî• L·ªói khi ho√†n th√†nh nhi·ªám v·ª•:", error.message);
      throw new Error(error.message);
    }
};


module.exports = { getAuthorTaskById, createAuthorTask, completeAuthorTask };
