const AuthorExp = require("../../../models/authors/authorExpModel");
const { addExpForAuthor } = require("./expUtils");
const AuthorLevel = require("../../../models/authors/authorLevelModel");
const AuthorTaskService = require("./authorTaskService");

const createAuthorExp = async (userId) => {
  try {
    const existingExp = await AuthorExp.findOne({ idUser: userId });
    if (!existingExp) {
      const level1 = await AuthorLevel.findOne({ level: 1 });
      if (!level1) {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y AuthorLevel c·∫•p 1!");
        return;
      }

      const authorExp = await AuthorExp.create({
        idUser: userId,
        idLevel: level1._id,
      });

      // T·∫°o AuthorTask t∆∞∆°ng ·ª©ng
      await AuthorTaskService.createAuthorTask(authorExp._id);

      console.log("üëâ T·∫°o AuthorTask v·ªõi authorExpID:", authorExp._id);
    } else {
      console.log("‚ÑπÔ∏è AuthorExp ƒë√£ t·ªìn t·∫°i, kh√¥ng t·∫°o l·∫°i!");
    }
  } catch (error) {
    console.error("üî• L·ªói trong createAuthorExp:", error.message);
    throw error;
  }
};

//L·∫•y AuthorExp theo IDUser
const getByUserId = async (userId) => {
  try {
    const authorExp = await AuthorExp.findOne({ idUser: userId })
      .populate("idUser", "username email")
      .populate("idLevel", "level title requiredExp");
    return authorExp;
  } catch (error) {
    throw error;
  }
};

// X√≥a AuthorExp (k√®m theo AuthorTask)
const deleteAuthorExp = async (userId) => {
  try {
    const authorExp = await AuthorExp.findOne({ idUser: userId });
    if (authorExp) {
      await AuthorExp.deleteOne({ idUser: userId });
      console.log("üóëÔ∏è AuthorExp ƒë√£ b·ªã x√≥a!");

      // X√≥a nhi·ªám v·ª• c·ªßa t√°c gi·∫£ li√™n quan
      await AuthorTaskService.deleteAuthorTask(authorExp._id);
    }
  } catch (error) {
    throw new Error("üî• L·ªói khi x√≥a AuthorExp: " + error.message);
  }
};

// L·∫•y t·∫•t c·∫£ AuthorExp
const getAllAuthorExp = async () => {
  return await AuthorExp.find()
    .populate("idUser", "username email")
    .populate("idLevel", "level title"); // Th√™m d√≤ng n√†y
};

// L·∫•y th√¥ng tin Exp c·ªßa m·ªôt Author theo ID
const getAuthorExpById = async (id) => {
  return await AuthorExp.findById(id)
    .populate("idUser", "username email")
    .populate("idLevel", "level title"); // Th√™m d√≤ng n√†y
};

// Xu·∫•t t·∫•t c·∫£ c√°c h√†m
module.exports = {
  createAuthorExp,
  deleteAuthorExp,
  getAllAuthorExp,
  getByUserId,
  getAuthorExpById,
  addExpForAuthor,
};
